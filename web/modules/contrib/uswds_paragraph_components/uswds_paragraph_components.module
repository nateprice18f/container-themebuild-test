<?php

/**
 * @file
 * USWDS Paragraphs module file.
 */

use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function uswds_paragraph_components_help($route_name, RouteMatchInterface $route_match): ?string {
  switch ($route_name) {
    case 'help.page.uswds_paragraph_components':
      $text = file_get_contents(dirname(__FILE__) . "/README.md");
      if (!\Drupal::moduleHandler()->moduleExists('markdown')) {
        return '<pre>' . $text . '</pre>';
      }
      else {
        // Use the Markdown filter to render the README.
        $filter_manager = \Drupal::service('plugin.manager.filter');
        $settings = \Drupal::configFactory()->get('markdown.settings')->getRawData();
        $config = ['settings' => $settings];
        $filter = $filter_manager->createInstance('markdown', $config);
        return $filter->process($text, 'en');
      }
  }
  return NULL;
}

/**
 * Implements hook_theme().
 */
function uswds_paragraph_components_theme($existing, $type, $theme, $path): array {
  return [
    'paragraph__default' => [
      'base hook' => 'paragraph',
    ],
    'paragraph__uswds_accordion' => [
      'base hook' => 'paragraph',
      'path' => $path . '/components/accordion',
    ],
    'paragraph__uswds_alert' => [
      'base hook' => 'paragraph',
      'path' => $path . '/components/alert',
    ],
    'paragraph__uswds_card_group_regular' => [
      'base hook' => 'paragraph',
      'path' => $path . '/components/cards',
    ],
    'paragraph__uswds_card_group_flag' => [
      'base hook' => 'paragraph',
      'path' => $path . '/components/cards',
    ],
    'regular_cards' => [
      'template' => 'regular_cards',
      'path' => $path . '/components/cards',
    ],
    'paragraph__uswds_2_columns' => [
      'base hook' => 'paragraph',
      'path' => $path . '/components/grid-layout',
    ],
    'paragraph__uswds_3_columns' => [
      'base hook' => 'paragraph',
      'path' => $path . '/components/grid-layout',
    ],
    'paragraph__uswds_modal' => [
      'base hook' => 'paragraph',
      'path' => $path . '/components/modal',
    ],
    'paragraph__uswds_process_list' => [
      'base hook' => 'paragraph',
      'path' => $path . '/components/process-list',
    ],
    'paragraph__uswds_step_indicator_list' => [
      'base hook' => 'paragraph',
      'path' => $path . '/components/step-indicator-list',
    ],
    'paragraph__uswds_summary_box' => [
      'base hook' => 'paragraph',
      'path' => $path . '/components/summary-box',
    ],
  ];
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 */
function uswds_paragraph_components_field_widget_uswds_paragraph_components_paragraphs_form_alter(&$element, &$form_state, $context) {
  if (isset($element['#paragraph_type']) && ($element['#paragraph_type'] == 'uswds_card_breakpoints' ||
      $element['#paragraph_type'] == 'uswds_3_column_breakpoints' ||
      $element['#paragraph_type'] == 'uswds_2_column_breakpoints')) {

    if (isset($element['subform']['field_uswds_breakpoints'])) {
      if ($context['widget']->getSetting('disable_breakpoints')) {
        $element['subform']['field_uswds_breakpoints']['widget']['#disabled'] = TRUE;
      }
      if (empty($element['subform']['field_uswds_breakpoints']['widget']['#default_value']) && !empty($context['form']['#custom_tids'])) {
        $element['subform']['field_uswds_breakpoints']['widget']['#default_value'] = $context['form']['#custom_tids'][$context['delta']];
      }
    }
  }
}
