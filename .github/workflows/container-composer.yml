name: Creates Composer Container from upstream 

on:
  push:
    branches: [ contiainer-theme ]
  pull_request:
    branches: [ contiainer-theme ]

jobs:
  compose:
    name: Compose Setup and creates artifact
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Generate Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            natep18f/container-themebuild-test
          tags: |
            type=ref,event=branch
            type=semver,pattern={{major}}.{{minor}}
          flavor: |
            latest=false

      #- name: Lint Dockerfile
      #  uses: hadolint/hadolint-action@v3.1.0
      #  with:
      #    dockerfile: Dockerfile
  
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v1

      - name: Setup Docker Buildx 
        uses: docker/setup-buildx-action@v2.5.0
        
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      
      - name: Build and push image to Docker Hub
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64, linux/arm64
      
      - name: Security scan
        uses: anchore/scan-action@v3
        with:
          image-reference: "natep18f/container-themebuild-test:container-build-composer"
          fail-build: true
          
  #pull-var-www:
  #  name: Pull /var/www from docker image
  #  needs: compose
  #  runs-on: ubuntu-latest
  #  steps:
  #     - name: Pull image
  #       run: docker pull natep18f/container-themebuild-test:container-build-composer
  #     - name: Pull folder from docker image
  #       run: docker run --rm -v ${{ github.workspace }}:/var/www ontainer-themebuild-test:container-build-composer cp -r /var/www 
     
     # - name: Copy workdir
        #run: docker cp $(docker create ${{ secrets.DOCKER_HUB_USERNAME }}/image:latest):/workdir www
        #run: docker cp $(docker create ${{ secrets.DOCKER_HUB_USERNAME }}/container-themebuild-test:container-build-composer):/var/www www
      
  build-theme:
    name: Builds themebuilder packages
    #needs: pull-var-www
    needs: compose
    runs-on: natep18f/container-themebuild-test:container-build-composer
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      #- name: Download artifact
      #  uses: actions/download-artifact@v2
      #  with:
      #    name: www
      #    path: ${{ github.workspace }}/var/www
        
      - name: Generate Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            natep18f/container-themebuild-test
          tags: |
            type=ref,event=branch
            type=semver,pattern={{major}}.{{minor}}
          flavor: |
            latest=false

      #- name: Lint Dockerfile
      #  uses: hadolint/hadolint-action@v3.1.0
      #  with:
      #    dockerfile: Dockerfile
  
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v1

      - name: Setup Docker Buildx 
        uses: docker/setup-buildx-action@v2.5.0
        
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      
      - name: Build and push image to Docker Hub
        uses: docker/build-push-action@v4
        with:
          push: true
          context: .
          file: ./cms.Dockerfile
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64, linux/arm64
          
      - name: Security scan
        uses: anchore/scan-action@v3
        with:
          image-reference: "ubuntu:latest"
          fail-build: true
          
    #name: Create artifact of both compose and themebuild
    #needs: build-theme
    #steps:
      - name: tar folder
        run: tar -cvf themebuild.zip /var/www

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: themebuild
          path: themebuild.zip
